// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: login/login.proto

package login

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_mailru_easyjson_buffer "github.com/mailru/easyjson/buffer"
	github_com_mailru_easyjson_jwriter "github.com/mailru/easyjson/jwriter"
	_ "github.com/ravinggo/game/common/basepb"
	github_com_ravinggo_tools_jsonany "github.com/ravinggo/tools/jsonany"
	google_golang_org_protobuf_reflect_protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LoginErrorCode int32

const (
	LoginErrorCode_LoginErrorInvalidLoginType          LoginErrorCode = 0
	LoginErrorCode_LoginErrorTokenExpired              LoginErrorCode = 1
	LoginErrorCode_LoginErrorAccountIsNotRegistered    LoginErrorCode = 2
	LoginErrorCode_LoginErrorAccountIsRegistered       LoginErrorCode = 3
	LoginErrorCode_LoginErrorFormatError               LoginErrorCode = 4
	LoginErrorCode_LoginErrorPasswordFormatError       LoginErrorCode = 5
	LoginErrorCode_LoginErrorNotRealNameAuthentication LoginErrorCode = 6
	LoginErrorCode_LoginErrorAccountIsWrong            LoginErrorCode = 7
	LoginErrorCode_LoginErrorAuthenticationNotApproved LoginErrorCode = 8
	LoginErrorCode_LoginErrorAgeLimit                  LoginErrorCode = 9
	LoginErrorCode_LoginErrorLimitPlayTimeConfigWrong  LoginErrorCode = 10
	LoginErrorCode_LoginErrorFeedbackContentTooLong    LoginErrorCode = 11
	LoginErrorCode_LoginErrorFeedbackContactTooLong    LoginErrorCode = 12
	LoginErrorCode_LoginErrorTokenExpiredIsReconnect   LoginErrorCode = 13
)

var LoginErrorCode_name = map[int32]string{
	0:  "LoginErrorInvalidLoginType",
	1:  "LoginErrorTokenExpired",
	2:  "LoginErrorAccountIsNotRegistered",
	3:  "LoginErrorAccountIsRegistered",
	4:  "LoginErrorFormatError",
	5:  "LoginErrorPasswordFormatError",
	6:  "LoginErrorNotRealNameAuthentication",
	7:  "LoginErrorAccountIsWrong",
	8:  "LoginErrorAuthenticationNotApproved",
	9:  "LoginErrorAgeLimit",
	10: "LoginErrorLimitPlayTimeConfigWrong",
	11: "LoginErrorFeedbackContentTooLong",
	12: "LoginErrorFeedbackContactTooLong",
	13: "LoginErrorTokenExpiredIsReconnect",
}

var LoginErrorCode_value = map[string]int32{
	"LoginErrorInvalidLoginType":          0,
	"LoginErrorTokenExpired":              1,
	"LoginErrorAccountIsNotRegistered":    2,
	"LoginErrorAccountIsRegistered":       3,
	"LoginErrorFormatError":               4,
	"LoginErrorPasswordFormatError":       5,
	"LoginErrorNotRealNameAuthentication": 6,
	"LoginErrorAccountIsWrong":            7,
	"LoginErrorAuthenticationNotApproved": 8,
	"LoginErrorAgeLimit":                  9,
	"LoginErrorLimitPlayTimeConfigWrong":  10,
	"LoginErrorFeedbackContentTooLong":    11,
	"LoginErrorFeedbackContactTooLong":    12,
	"LoginErrorTokenExpiredIsReconnect":   13,
}

func (LoginErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6fe61ab550dd3bc4, []int{0}
}

type LoginReq struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *LoginReq) Reset()      { *m = LoginReq{} }
func (*LoginReq) ProtoMessage() {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fe61ab550dd3bc4, []int{0}
}
func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(m, src)
}
func (m *LoginReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (m *LoginReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (*LoginReq) XXX_MessageName() string {
	return "login.LoginReq"
}

type LoginRsp struct {
	LoginResult int64 `protobuf:"varint,1,opt,name=login_result,json=loginResult,proto3" json:"login_result,omitempty"`
}

func (m *LoginRsp) Reset()      { *m = LoginRsp{} }
func (*LoginRsp) ProtoMessage() {}
func (*LoginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fe61ab550dd3bc4, []int{1}
}
func (m *LoginRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRsp.Merge(m, src)
}
func (m *LoginRsp) XXX_Size() int {
	return m.Size()
}
func (m *LoginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRsp proto.InternalMessageInfo

func (m *LoginRsp) GetLoginResult() int64 {
	if m != nil {
		return m.LoginResult
	}
	return 0
}

func (*LoginRsp) XXX_MessageName() string {
	return "login.LoginRsp"
}
func init() {
	proto.RegisterEnum("login.LoginErrorCode", LoginErrorCode_name, LoginErrorCode_value)
	proto.RegisterType((*LoginReq)(nil), "login.LoginReq")
	proto.RegisterType((*LoginRsp)(nil), "login.LoginRsp")
}

func init() { proto.RegisterFile("login/login.proto", fileDescriptor_6fe61ab550dd3bc4) }

var fileDescriptor_6fe61ab550dd3bc4 = []byte{
	// 768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcf, 0x4f, 0xe3, 0x46,
	0x14, 0xc7, 0xe3, 0xdd, 0xee, 0x2e, 0xeb, 0x50, 0xea, 0x1d, 0x2d, 0xad, 0xe5, 0xd5, 0x5a, 0x1b,
	0x56, 0xea, 0x6e, 0x57, 0xdd, 0x16, 0x75, 0xd5, 0x5e, 0xe8, 0x25, 0x50, 0x90, 0x90, 0x10, 0x45,
	0x69, 0xa4, 0x4a, 0xbd, 0x54, 0x26, 0x99, 0xa6, 0x16, 0x89, 0xc7, 0xb5, 0x1d, 0x5a, 0x6e, 0xa4,
	0x82, 0x10, 0xb9, 0x4d, 0x93, 0x03, 0x34, 0x02, 0x45, 0x94, 0x43, 0x1b, 0x51, 0x44, 0x13, 0x01,
	0x31, 0x49, 0x1a, 0x28, 0x57, 0x8e, 0x1c, 0x39, 0xb6, 0x09, 0xe3, 0x1f, 0xb7, 0xfe, 0x09, 0x2b,
	0xdb, 0x09, 0x49, 0xa4, 0x70, 0xb1, 0x3c, 0x6f, 0xde, 0xf7, 0xf3, 0x7d, 0xf3, 0xe6, 0x07, 0xf9,
	0x20, 0x8a, 0x22, 0xbc, 0xf0, 0xa1, 0xf3, 0xfd, 0x40, 0x94, 0x90, 0x82, 0xc0, 0x1d, 0x67, 0xc0,
	0x78, 0xa1, 0x24, 0x21, 0xc9, 0x8d, 0x8d, 0x8c, 0x93, 0x03, 0x33, 0x76, 0x34, 0x00, 0xbf, 0x03,
	0x0c, 0x39, 0x10, 0x97, 0xa1, 0x24, 0x70, 0x31, 0x48, 0x13, 0x4f, 0x88, 0xe7, 0xf7, 0x03, 0xd7,
	0x63, 0x7b, 0x4e, 0xe4, 0x64, 0xf9, 0x7b, 0x24, 0x85, 0xe9, 0x5b, 0xee, 0x5c, 0x7b, 0x3c, 0xf2,
	0xb2, 0xcd, 0x90, 0x45, 0xe0, 0x23, 0x07, 0x1d, 0x97, 0xaf, 0x25, 0x28, 0xc7, 0xa3, 0x8a, 0xc3,
	0xb9, 0x1d, 0xf0, 0x46, 0x5d, 0x0f, 0x3b, 0xf4, 0x62, 0xef, 0x1e, 0x39, 0xe4, 0xe4, 0x4f, 0xda,
	0x75, 0x4c, 0xa0, 0x30, 0x04, 0x63, 0x24, 0xd3, 0x89, 0x4c, 0x0b, 0x8b, 0x5c, 0x94, 0x0f, 0x3b,
	0x81, 0xe0, 0x92, 0x08, 0x29, 0x0f, 0xf3, 0x48, 0xd5, 0xe8, 0x77, 0xc0, 0xb0, 0x9e, 0xdb, 0xd1,
	0x37, 0x52, 0xc6, 0xd6, 0x8a, 0xb1, 0x59, 0xc7, 0xa7, 0x1b, 0xc6, 0x41, 0x1d, 0x6f, 0xff, 0x04,
	0x46, 0xc9, 0xb7, 0x3b, 0xe2, 0x20, 0x5a, 0x80, 0xc2, 0xe4, 0x0f, 0x22, 0x2f, 0xc1, 0x30, 0x45,
	0x30, 0x0f, 0x55, 0x8d, 0xa6, 0xc0, 0x90, 0x62, 0x47, 0x71, 0xe5, 0xd0, 0x3c, 0x5b, 0xd3, 0xf3,
	0xbf, 0x81, 0x31, 0xf2, 0x49, 0x47, 0xe1, 0x0f, 0x85, 0x50, 0x5c, 0x50, 0xa6, 0xe5, 0x59, 0xa4,
	0x04, 0x60, 0x84, 0x97, 0x15, 0x68, 0x6b, 0x6f, 0x31, 0xc3, 0xaa, 0x46, 0x3f, 0x00, 0x6f, 0x99,
	0xe5, 0x02, 0xce, 0x54, 0xf4, 0xfc, 0x9e, 0x7e, 0xb4, 0x8b, 0x93, 0x3f, 0x03, 0x3f, 0xf9, 0xb8,
	0x8f, 0xb8, 0x4b, 0x79, 0x9b, 0x61, 0x55, 0x8d, 0x66, 0x00, 0xed, 0x2a, 0x71, 0xe5, 0xd0, 0x55,
	0x9a, 0xa5, 0x8a, 0x5b, 0x37, 0xf8, 0x94, 0x1c, 0xee, 0x20, 0xa6, 0x90, 0x14, 0xe3, 0x14, 0xe7,
	0x97, 0x7a, 0x83, 0xf1, 0xa9, 0x1a, 0xfd, 0x18, 0x3c, 0x6a, 0x99, 0xee, 0x9c, 0xe0, 0x93, 0xcc,
	0x55, 0x35, 0x6d, 0xec, 0x17, 0x70, 0x36, 0x65, 0x16, 0x12, 0xfa, 0xc1, 0x8f, 0xe0, 0xb3, 0xee,
	0x02, 0xe6, 0x5a, 0x9b, 0xd0, 0x4d, 0xb9, 0xd3, 0xa6, 0xe0, 0x52, 0xd2, 0xd8, 0x49, 0xdc, 0x44,
	0x79, 0xda, 0xa1, 0x38, 0x4b, 0xe7, 0xa2, 0xb3, 0x5c, 0x0c, 0xfa, 0xe3, 0xca, 0xb7, 0x50, 0x50,
	0xf8, 0x10, 0xa7, 0xf0, 0x48, 0xa0, 0xee, 0xb6, 0x7b, 0x7f, 0xdd, 0x06, 0x5c, 0xdc, 0xc6, 0xd9,
	0xb4, 0x59, 0xfc, 0xdd, 0x2c, 0x25, 0xc0, 0x27, 0x24, 0xdd, 0xa7, 0x19, 0x5f, 0x4a, 0x48, 0x88,
	0x50, 0xf7, 0x18, 0x5a, 0xd5, 0xe8, 0x87, 0x00, 0xb4, 0xfa, 0xe0, 0x14, 0x63, 0xad, 0x6f, 0x9a,
	0xa5, 0x52, 0xaf, 0x7b, 0xaf, 0xe5, 0x2c, 0x52, 0xfc, 0xa2, 0x28, 0xa1, 0x45, 0x18, 0xa6, 0x06,
	0x7a, 0xdd, 0x5d, 0xd3, 0xab, 0x6a, 0xda, 0x5a, 0xde, 0x32, 0xcf, 0xd6, 0xc0, 0x0b, 0x12, 0x74,
	0x51, 0x22, 0x70, 0x86, 0x8f, 0xf1, 0x0a, 0x75, 0x9f, 0x01, 0xaa, 0x46, 0x0f, 0x81, 0x41, 0x5c,
	0x2b, 0x5b, 0xff, 0xac, 0x58, 0x9b, 0x59, 0x9c, 0x3a, 0x06, 0x9f, 0x93, 0x23, 0x9d, 0x5c, 0x27,
	0x71, 0x2e, 0xca, 0x2d, 0x05, 0xf9, 0x18, 0x9c, 0x40, 0xc2, 0x37, 0x7c, 0xc4, 0xad, 0x99, 0x64,
	0x9e, 0xa9, 0x1a, 0xfd, 0x14, 0xf8, 0xec, 0xfd, 0x4e, 0x65, 0x71, 0xad, 0xac, 0x57, 0xab, 0xc6,
	0x2f, 0x7f, 0xea, 0xb9, 0x63, 0x2b, 0x57, 0xb6, 0x56, 0xd3, 0xc6, 0x69, 0xb1, 0xb5, 0x84, 0x2f,
	0xba, 0x0f, 0xd1, 0x14, 0x84, 0xe1, 0x79, 0x2e, 0xb4, 0x30, 0x81, 0x04, 0x05, 0x0a, 0x4a, 0x10,
	0xa1, 0x19, 0x1b, 0xe7, 0x65, 0x5e, 0xaa, 0x1a, 0xfd, 0x1e, 0x78, 0x86, 0x33, 0x69, 0xab, 0x90,
	0xc2, 0xc9, 0x55, 0x5c, 0xac, 0x59, 0x1b, 0x67, 0xf8, 0xef, 0x82, 0x95, 0x5f, 0xc6, 0xf9, 0xdd,
	0x8f, 0x46, 0x47, 0xf1, 0x5f, 0x39, 0x63, 0xbf, 0x70, 0x55, 0xff, 0x03, 0x27, 0x57, 0x41, 0xe0,
	0x26, 0x28, 0x17, 0xba, 0x86, 0x0e, 0x32, 0xef, 0xab, 0x1a, 0xfd, 0x1c, 0xbc, 0x6b, 0x26, 0xd6,
	0x8d, 0xa3, 0xba, 0xfe, 0x6b, 0x0d, 0x9f, 0x64, 0xba, 0xa1, 0xaf, 0x7a, 0x99, 0x63, 0xa4, 0xaf,
	0xff, 0xfd, 0xb0, 0x4f, 0x6d, 0x08, 0x09, 0x02, 0x0c, 0x29, 0xd4, 0x9b, 0xfd, 0xaf, 0xca, 0xf8,
	0xc7, 0x97, 0xff, 0xb1, 0x9e, 0xf3, 0x06, 0x4b, 0x5c, 0x34, 0x58, 0xe2, 0xdf, 0x06, 0x4b, 0x98,
	0x0d, 0xd6, 0xf3, 0x7f, 0x83, 0x25, 0xb2, 0x4d, 0xd6, 0x73, 0xde, 0x64, 0x89, 0x8b, 0x26, 0xeb,
	0xb9, 0x6c, 0xb2, 0x9e, 0xaf, 0xbc, 0xe2, 0x7c, 0x4c, 0x8e, 0xb8, 0x0f, 0xce, 0xfc, 0x5d, 0xe7,
	0x75, 0x79, 0xf5, 0x3a, 0x00, 0x00, 0xff, 0xff, 0x92, 0x36, 0x93, 0xf9, 0x86, 0x04, 0x00, 0x00,
}

func (x LoginErrorCode) String() string {
	s, ok := LoginErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (m *LoginReq) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *LoginRsp) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}

var _ google_golang_org_protobuf_reflect_protoreflect.FullName = ""

func (m *LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoginResult != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.LoginResult))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogin(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = github_com_ravinggo_tools_jsonany.Any{}

func (m *LoginReq) MarshalEasyJSON(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Username != "" {
		w.RawByte('"')
		w.RawString("username")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Username)
		needWriteComma = true
	}
	if m.Password != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("password")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Password)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoginRsp) MarshalEasyJSON(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.LoginResult != 0 {
		w.RawByte('"')
		w.RawString("login_result")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LoginResult))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoginReq) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.MarshalEasyJSON(&w)
	return w.BuildBytes()
}
func (m *LoginReq) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoginReq) GoString() string {
	return m.String()
}

func (m *LoginRsp) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.MarshalEasyJSON(&w)
	return w.BuildBytes()
}
func (m *LoginRsp) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoginRsp) GoString() string {
	return m.String()
}

func (m *LoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func (m *LoginRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoginResult != 0 {
		n += 1 + sovLogin(uint64(m.LoginResult))
	}
	return n
}

func sovLogin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogin(x uint64) (n int) {
	return sovLogin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginResult", wireType)
			}
			m.LoginResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginResult |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogin = fmt.Errorf("proto: unexpected end of group")
)
