// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game/echo.proto

package game

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_mailru_easyjson_buffer "github.com/mailru/easyjson/buffer"
	github_com_mailru_easyjson_jwriter "github.com/mailru/easyjson/jwriter"
	_ "github.com/ravinggo/game/common/basepb"
	github_com_ravinggo_tools_jsonany "github.com/ravinggo/tools/jsonany"
	google_golang_org_protobuf_reflect_protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EchoErrorCode int32

const (
	EchoErrorCode_EchoErrorTest1 EchoErrorCode = 0
)

var EchoErrorCode_name = map[int32]string{
	0: "EchoErrorTest1",
}

var EchoErrorCode_value = map[string]int32{
	"EchoErrorTest1": 0,
}

func (EchoErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0b9322c06229281b, []int{0}
}

type LoginSuccessReq struct {
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (m *LoginSuccessReq) Reset()      { *m = LoginSuccessReq{} }
func (*LoginSuccessReq) ProtoMessage() {}
func (*LoginSuccessReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b9322c06229281b, []int{0}
}
func (m *LoginSuccessReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginSuccessReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginSuccessReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginSuccessReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginSuccessReq.Merge(m, src)
}
func (m *LoginSuccessReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginSuccessReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginSuccessReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginSuccessReq proto.InternalMessageInfo

func (m *LoginSuccessReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (*LoginSuccessReq) XXX_MessageName() string {
	return "game.LoginSuccessReq"
}

type LoginSuccessRsp struct {
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (m *LoginSuccessRsp) Reset()      { *m = LoginSuccessRsp{} }
func (*LoginSuccessRsp) ProtoMessage() {}
func (*LoginSuccessRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b9322c06229281b, []int{1}
}
func (m *LoginSuccessRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginSuccessRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginSuccessRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginSuccessRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginSuccessRsp.Merge(m, src)
}
func (m *LoginSuccessRsp) XXX_Size() int {
	return m.Size()
}
func (m *LoginSuccessRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginSuccessRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LoginSuccessRsp proto.InternalMessageInfo

func (m *LoginSuccessRsp) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (*LoginSuccessRsp) XXX_MessageName() string {
	return "game.LoginSuccessRsp"
}

type EchoReq struct {
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *EchoReq) Reset()      { *m = EchoReq{} }
func (*EchoReq) ProtoMessage() {}
func (*EchoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b9322c06229281b, []int{2}
}
func (m *EchoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoReq.Merge(m, src)
}
func (m *EchoReq) XXX_Size() int {
	return m.Size()
}
func (m *EchoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoReq.DiscardUnknown(m)
}

var xxx_messageInfo_EchoReq proto.InternalMessageInfo

func (m *EchoReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (*EchoReq) XXX_MessageName() string {
	return "game.EchoReq"
}

type EchoRsp struct {
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *EchoRsp) Reset()      { *m = EchoRsp{} }
func (*EchoRsp) ProtoMessage() {}
func (*EchoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b9322c06229281b, []int{3}
}
func (m *EchoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRsp.Merge(m, src)
}
func (m *EchoRsp) XXX_Size() int {
	return m.Size()
}
func (m *EchoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRsp proto.InternalMessageInfo

func (m *EchoRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (*EchoRsp) XXX_MessageName() string {
	return "game.EchoRsp"
}
func init() {
	proto.RegisterEnum("game.EchoErrorCode", EchoErrorCode_name, EchoErrorCode_value)
	proto.RegisterType((*LoginSuccessReq)(nil), "game.LoginSuccessReq")
	proto.RegisterType((*LoginSuccessRsp)(nil), "game.LoginSuccessRsp")
	proto.RegisterType((*EchoReq)(nil), "game.EchoReq")
	proto.RegisterType((*EchoRsp)(nil), "game.EchoRsp")
}

func init() { proto.RegisterFile("game/echo.proto", fileDescriptor_0b9322c06229281b) }

var fileDescriptor_0b9322c06229281b = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4f, 0xcc, 0x4d,
	0xd5, 0x4f, 0x4d, 0xce, 0xc8, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0x09, 0x48,
	0x71, 0xa7, 0x16, 0x15, 0xe5, 0x17, 0x41, 0x84, 0x94, 0xf4, 0xb8, 0xf8, 0x7d, 0xf2, 0xd3, 0x33,
	0xf3, 0x82, 0x4b, 0x93, 0x93, 0x53, 0x8b, 0x8b, 0x83, 0x52, 0x0b, 0x85, 0xa4, 0xb9, 0x38, 0x4b,
	0x8b, 0x53, 0x8b, 0xe2, 0xf3, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x38,
	0x40, 0x02, 0x7e, 0x89, 0xb9, 0xa9, 0x18, 0xea, 0x8b, 0x0b, 0xf0, 0xab, 0x97, 0xe6, 0x62, 0x77,
	0x4d, 0xce, 0xc8, 0x07, 0x99, 0x2b, 0xc0, 0xc5, 0x9c, 0x5b, 0x9c, 0x0e, 0x55, 0x01, 0x62, 0xc2,
	0x25, 0x8b, 0x0b, 0x30, 0x25, 0xb5, 0x2c, 0xb8, 0x78, 0x41, 0x92, 0xae, 0x20, 0xc7, 0x3a, 0xe7,
	0xa7, 0xa4, 0x0a, 0xa9, 0x73, 0xf1, 0xc1, 0x05, 0x42, 0x52, 0x8b, 0x4b, 0x0c, 0x05, 0x18, 0xa4,
	0x84, 0xbb, 0xb6, 0x4a, 0xf0, 0x0b, 0xf1, 0x3e, 0xdb, 0xda, 0xfd, 0x62, 0xfd, 0xd4, 0x97, 0x53,
	0x66, 0xbe, 0x58, 0xbf, 0xde, 0xd0, 0xc9, 0xe2, 0xc6, 0x43, 0x39, 0x86, 0x15, 0x8f, 0xe4, 0x18,
	0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4,
	0x18, 0x3e, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc4, 0x63, 0x39, 0xc6, 0x0b, 0x8f,
	0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xe2, 0x2a, 0x48, 0xca, 0x2d, 0x4e, 0xd7, 0x07, 0x05,
	0x4d, 0x12, 0x1b, 0x38, 0x50, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xdd, 0x3c, 0xe7,
	0x3a, 0x01, 0x00, 0x00,
}

func (x EchoErrorCode) String() string {
	s, ok := EchoErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LoginSuccessReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginSuccessReq)
	if !ok {
		that2, ok := that.(LoginSuccessReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserName != that1.UserName {
		return false
	}
	return true
}
func (this *LoginSuccessRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginSuccessRsp)
	if !ok {
		that2, ok := that.(LoginSuccessRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserName != that1.UserName {
		return false
	}
	return true
}
func (this *EchoReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EchoReq)
	if !ok {
		that2, ok := that.(EchoReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *EchoRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EchoRsp)
	if !ok {
		that2, ok := that.(EchoRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (m *LoginSuccessReq) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *LoginSuccessRsp) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *EchoReq) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *EchoRsp) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *LoginSuccessReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginSuccessReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginSuccessReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintEcho(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginSuccessRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginSuccessRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginSuccessRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintEcho(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EchoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EchoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintEcho(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EchoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EchoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintEcho(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEcho(dAtA []byte, offset int, v uint64) int {
	offset -= sovEcho(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = github_com_ravinggo_tools_jsonany.Any{}

func (m *LoginSuccessReq) JsonBytes(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.UserName != "" {
		w.RawByte('"')
		w.RawString("user_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UserName)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoginSuccessRsp) JsonBytes(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.UserName != "" {
		w.RawByte('"')
		w.RawString("user_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UserName)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EchoReq) JsonBytes(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Msg != "" {
		w.RawByte('"')
		w.RawString("msg")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Msg)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EchoRsp) JsonBytes(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Msg != "" {
		w.RawByte('"')
		w.RawString("msg")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Msg)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoginSuccessReq) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoginSuccessReq) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoginSuccessReq) GoString() string {
	return m.String()
}

func (m *LoginSuccessRsp) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoginSuccessRsp) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoginSuccessRsp) GoString() string {
	return m.String()
}

func (m *EchoReq) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EchoReq) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EchoReq) GoString() string {
	return m.String()
}

func (m *EchoRsp) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EchoRsp) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EchoRsp) GoString() string {
	return m.String()
}

func (m *LoginSuccessReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovEcho(uint64(l))
	}
	return n
}

func (m *LoginSuccessRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovEcho(uint64(l))
	}
	return n
}

func (m *EchoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovEcho(uint64(l))
	}
	return n
}

func (m *EchoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovEcho(uint64(l))
	}
	return n
}

func sovEcho(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEcho(x uint64) (n int) {
	return sovEcho(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginSuccessReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcho
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginSuccessReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginSuccessReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcho
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcho(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEcho
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginSuccessRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcho
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginSuccessRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginSuccessRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcho
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcho(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEcho
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcho
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcho
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcho(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEcho
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcho
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcho
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcho(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEcho
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEcho(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEcho
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEcho
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEcho
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEcho
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEcho
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEcho
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEcho        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEcho          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEcho = fmt.Errorf("proto: unexpected end of group")
)
