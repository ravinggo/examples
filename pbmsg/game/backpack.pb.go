// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game/backpack.proto

package game

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_mailru_easyjson_buffer "github.com/mailru/easyjson/buffer"
	github_com_mailru_easyjson_jwriter "github.com/mailru/easyjson/jwriter"
	_ "github.com/ravinggo/game/common/basepb"
	github_com_ravinggo_tools_jsonany "github.com/ravinggo/tools/jsonany"
	google_golang_org_protobuf_reflect_protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BackpackErrorCode int32

const (
	BackpackErrorCode_BackpackErrorItemNotEnough BackpackErrorCode = 0
)

var BackpackErrorCode_name = map[int32]string{
	0: "BackpackErrorItemNotEnough",
}

var BackpackErrorCode_value = map[string]int32{
	"BackpackErrorItemNotEnough": 0,
}

func (BackpackErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13117df3ffcdb1e5, []int{0}
}

type Item struct {
	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cid   int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	Value int64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Item) Reset()      { *m = Item{} }
func (*Item) ProtoMessage() {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_13117df3ffcdb1e5, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Item) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Item) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (*Item) XXX_MessageName() string {
	return "game.Item"
}

type GetBackpackReq struct {
}

func (m *GetBackpackReq) Reset()      { *m = GetBackpackReq{} }
func (*GetBackpackReq) ProtoMessage() {}
func (*GetBackpackReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_13117df3ffcdb1e5, []int{1}
}
func (m *GetBackpackReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBackpackReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBackpackReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBackpackReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBackpackReq.Merge(m, src)
}
func (m *GetBackpackReq) XXX_Size() int {
	return m.Size()
}
func (m *GetBackpackReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBackpackReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetBackpackReq proto.InternalMessageInfo

func (*GetBackpackReq) XXX_MessageName() string {
	return "game.GetBackpackReq"
}

type GetBackpackRsp struct {
	Items []*Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *GetBackpackRsp) Reset()      { *m = GetBackpackRsp{} }
func (*GetBackpackRsp) ProtoMessage() {}
func (*GetBackpackRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_13117df3ffcdb1e5, []int{2}
}
func (m *GetBackpackRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBackpackRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBackpackRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBackpackRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBackpackRsp.Merge(m, src)
}
func (m *GetBackpackRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetBackpackRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBackpackRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetBackpackRsp proto.InternalMessageInfo

func (m *GetBackpackRsp) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*GetBackpackRsp) XXX_MessageName() string {
	return "game.GetBackpackRsp"
}

type AddItemReq struct {
	Cid   int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *AddItemReq) Reset()      { *m = AddItemReq{} }
func (*AddItemReq) ProtoMessage() {}
func (*AddItemReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_13117df3ffcdb1e5, []int{3}
}
func (m *AddItemReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddItemReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddItemReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddItemReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddItemReq.Merge(m, src)
}
func (m *AddItemReq) XXX_Size() int {
	return m.Size()
}
func (m *AddItemReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddItemReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddItemReq proto.InternalMessageInfo

func (m *AddItemReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *AddItemReq) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (*AddItemReq) XXX_MessageName() string {
	return "game.AddItemReq"
}

type AddItemRsp struct {
	Item *Item `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *AddItemRsp) Reset()      { *m = AddItemRsp{} }
func (*AddItemRsp) ProtoMessage() {}
func (*AddItemRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_13117df3ffcdb1e5, []int{4}
}
func (m *AddItemRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddItemRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddItemRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddItemRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddItemRsp.Merge(m, src)
}
func (m *AddItemRsp) XXX_Size() int {
	return m.Size()
}
func (m *AddItemRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddItemRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AddItemRsp proto.InternalMessageInfo

func (m *AddItemRsp) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (*AddItemRsp) XXX_MessageName() string {
	return "game.AddItemRsp"
}

type SubItemReq struct {
	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SubItemReq) Reset()      { *m = SubItemReq{} }
func (*SubItemReq) ProtoMessage() {}
func (*SubItemReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_13117df3ffcdb1e5, []int{5}
}
func (m *SubItemReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubItemReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubItemReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubItemReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubItemReq.Merge(m, src)
}
func (m *SubItemReq) XXX_Size() int {
	return m.Size()
}
func (m *SubItemReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SubItemReq.DiscardUnknown(m)
}

var xxx_messageInfo_SubItemReq proto.InternalMessageInfo

func (m *SubItemReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SubItemReq) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (*SubItemReq) XXX_MessageName() string {
	return "game.SubItemReq"
}

type SubItemRsp struct {
	Item *Item `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *SubItemRsp) Reset()      { *m = SubItemRsp{} }
func (*SubItemRsp) ProtoMessage() {}
func (*SubItemRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_13117df3ffcdb1e5, []int{6}
}
func (m *SubItemRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubItemRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubItemRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubItemRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubItemRsp.Merge(m, src)
}
func (m *SubItemRsp) XXX_Size() int {
	return m.Size()
}
func (m *SubItemRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SubItemRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SubItemRsp proto.InternalMessageInfo

func (m *SubItemRsp) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (*SubItemRsp) XXX_MessageName() string {
	return "game.SubItemRsp"
}
func init() {
	proto.RegisterEnum("game.BackpackErrorCode", BackpackErrorCode_name, BackpackErrorCode_value)
	proto.RegisterType((*Item)(nil), "game.Item")
	proto.RegisterType((*GetBackpackReq)(nil), "game.GetBackpackReq")
	proto.RegisterType((*GetBackpackRsp)(nil), "game.GetBackpackRsp")
	proto.RegisterType((*AddItemReq)(nil), "game.AddItemReq")
	proto.RegisterType((*AddItemRsp)(nil), "game.AddItemRsp")
	proto.RegisterType((*SubItemReq)(nil), "game.SubItemReq")
	proto.RegisterType((*SubItemRsp)(nil), "game.SubItemRsp")
}

func init() { proto.RegisterFile("game/backpack.proto", fileDescriptor_13117df3ffcdb1e5) }

var fileDescriptor_13117df3ffcdb1e5 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0x4f, 0xcc, 0x4d,
	0xd5, 0x4f, 0x4a, 0x4c, 0xce, 0x2e, 0x48, 0x4c, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x01, 0x09, 0x4a, 0x71, 0xa7, 0x16, 0x15, 0xe5, 0x17, 0x41, 0x84, 0x94, 0xec, 0xb8, 0x58,
	0x3c, 0x4b, 0x52, 0x73, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98,
	0x83, 0x98, 0x32, 0x53, 0x84, 0x04, 0xb8, 0x98, 0x93, 0x33, 0x53, 0x24, 0x98, 0xc0, 0x02, 0x20,
	0xa6, 0x90, 0x08, 0x17, 0x6b, 0x59, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0x33, 0x58, 0x0c, 0xc2, 0x51,
	0x12, 0xe0, 0xe2, 0x73, 0x4f, 0x2d, 0x71, 0x82, 0xda, 0x13, 0x94, 0x5a, 0xa8, 0x64, 0x84, 0x2a,
	0x52, 0x5c, 0x20, 0xa4, 0xc0, 0xc5, 0x9a, 0x59, 0x92, 0x9a, 0x5b, 0x2c, 0xc1, 0xa8, 0xc0, 0xac,
	0xc1, 0x6d, 0xc4, 0xa5, 0x07, 0x72, 0x86, 0x1e, 0xc8, 0xda, 0x20, 0x88, 0x84, 0x92, 0x09, 0x17,
	0x97, 0x63, 0x4a, 0x0a, 0x58, 0x24, 0xb5, 0x10, 0x66, 0x37, 0x23, 0x16, 0xbb, 0x99, 0x90, 0xed,
	0xd6, 0x41, 0xe8, 0x2a, 0x2e, 0x10, 0x92, 0xe3, 0x62, 0x01, 0x19, 0x06, 0xd6, 0x86, 0x6a, 0x09,
	0x58, 0x5c, 0xc9, 0x88, 0x8b, 0x2b, 0xb8, 0x34, 0x09, 0x66, 0x07, 0xba, 0x7f, 0x71, 0xda, 0x00,
	0xd3, 0x43, 0xd8, 0x06, 0x2d, 0x77, 0x2e, 0x41, 0x98, 0xb7, 0x5d, 0x41, 0x41, 0xec, 0x9c, 0x9f,
	0x92, 0x2a, 0x64, 0xc4, 0x25, 0x85, 0x22, 0x08, 0x52, 0xef, 0x97, 0x5f, 0xe2, 0x9a, 0x97, 0x5f,
	0x9a, 0x9e, 0x21, 0xc0, 0x20, 0x25, 0xd4, 0xb5, 0x55, 0x82, 0x4f, 0x88, 0xe7, 0x65, 0xe3, 0xe4,
	0xa7, 0xad, 0xdb, 0x9f, 0xec, 0xe8, 0x7d, 0xb1, 0x6d, 0xb3, 0x93, 0xc9, 0x8d, 0x87, 0x72, 0x0c,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8b, 0x47, 0x72,
	0x0c, 0x1f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe2, 0xb1, 0x1c, 0xe3, 0x85, 0xc7,
	0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x71, 0x15, 0x24, 0xe5, 0x16, 0xa7, 0xeb, 0x83, 0x5c,
	0x92, 0xc4, 0x06, 0x8e, 0x51, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xed, 0x93, 0x98,
	0xfb, 0x01, 0x00, 0x00,
}

func (x BackpackErrorCode) String() string {
	s, ok := BackpackErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (m *Item) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *GetBackpackReq) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *GetBackpackRsp) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *AddItemReq) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *AddItemRsp) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *SubItemReq) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *SubItemRsp) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}

var _ google_golang_org_protobuf_reflect_protoreflect.FullName = ""

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintBackpack(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x18
	}
	if m.Cid != 0 {
		i = encodeVarintBackpack(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintBackpack(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBackpackReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBackpackReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBackpackReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetBackpackRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBackpackRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBackpackRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBackpack(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddItemReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddItemReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddItemReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintBackpack(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Cid != 0 {
		i = encodeVarintBackpack(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddItemRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddItemRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddItemRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBackpack(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubItemReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubItemReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubItemReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintBackpack(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintBackpack(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubItemRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubItemRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubItemRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBackpack(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBackpack(dAtA []byte, offset int, v uint64) int {
	offset -= sovBackpack(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = github_com_ravinggo_tools_jsonany.Any{}

func (m *Item) MarshalEasyJSON(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Cid != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cid")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cid))
		needWriteComma = true
	}
	if m.Value != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Value))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GetBackpackReq) MarshalEasyJSON(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GetBackpackRsp) MarshalEasyJSON(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.MarshalEasyJSON(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *AddItemReq) MarshalEasyJSON(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Cid != 0 {
		w.RawByte('"')
		w.RawString("cid")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cid))
		needWriteComma = true
	}
	if m.Value != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Value))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *AddItemRsp) MarshalEasyJSON(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("item")
	w.RawByte('"')
	w.RawByte(':')
	m.Item.MarshalEasyJSON(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SubItemReq) MarshalEasyJSON(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Value != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Value))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SubItemRsp) MarshalEasyJSON(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("item")
	w.RawByte('"')
	w.RawByte(':')
	m.Item.MarshalEasyJSON(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Item) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.MarshalEasyJSON(&w)
	return w.BuildBytes()
}
func (m *Item) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Item) GoString() string {
	return m.String()
}

func (m *GetBackpackReq) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.MarshalEasyJSON(&w)
	return w.BuildBytes()
}
func (m *GetBackpackReq) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GetBackpackReq) GoString() string {
	return m.String()
}

func (m *GetBackpackRsp) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.MarshalEasyJSON(&w)
	return w.BuildBytes()
}
func (m *GetBackpackRsp) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GetBackpackRsp) GoString() string {
	return m.String()
}

func (m *AddItemReq) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.MarshalEasyJSON(&w)
	return w.BuildBytes()
}
func (m *AddItemReq) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *AddItemReq) GoString() string {
	return m.String()
}

func (m *AddItemRsp) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.MarshalEasyJSON(&w)
	return w.BuildBytes()
}
func (m *AddItemRsp) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *AddItemRsp) GoString() string {
	return m.String()
}

func (m *SubItemReq) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.MarshalEasyJSON(&w)
	return w.BuildBytes()
}
func (m *SubItemReq) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SubItemReq) GoString() string {
	return m.String()
}

func (m *SubItemRsp) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.MarshalEasyJSON(&w)
	return w.BuildBytes()
}
func (m *SubItemRsp) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SubItemRsp) GoString() string {
	return m.String()
}

func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBackpack(uint64(m.Id))
	}
	if m.Cid != 0 {
		n += 1 + sovBackpack(uint64(m.Cid))
	}
	if m.Value != 0 {
		n += 1 + sovBackpack(uint64(m.Value))
	}
	return n
}

func (m *GetBackpackReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetBackpackRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBackpack(uint64(l))
		}
	}
	return n
}

func (m *AddItemReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovBackpack(uint64(m.Cid))
	}
	if m.Value != 0 {
		n += 1 + sovBackpack(uint64(m.Value))
	}
	return n
}

func (m *AddItemRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovBackpack(uint64(l))
	}
	return n
}

func (m *SubItemReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBackpack(uint64(m.Id))
	}
	if m.Value != 0 {
		n += 1 + sovBackpack(uint64(m.Value))
	}
	return n
}

func (m *SubItemRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovBackpack(uint64(l))
	}
	return n
}

func sovBackpack(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBackpack(x uint64) (n int) {
	return sovBackpack(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackpack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackpack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackpack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackpack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBackpack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackpack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBackpackReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackpack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBackpackReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBackpackReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBackpack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackpack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBackpackRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackpack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBackpackRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBackpackRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackpack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackpack
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackpack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackpack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackpack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddItemReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackpack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddItemReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddItemReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackpack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackpack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBackpack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackpack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddItemRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackpack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddItemRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddItemRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackpack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackpack
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackpack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackpack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackpack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubItemReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackpack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubItemReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubItemReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackpack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackpack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBackpack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackpack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubItemRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackpack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubItemRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubItemRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackpack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackpack
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackpack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackpack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackpack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBackpack(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBackpack
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBackpack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBackpack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBackpack
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBackpack
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBackpack
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBackpack        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBackpack          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBackpack = fmt.Errorf("proto: unexpected end of group")
)
